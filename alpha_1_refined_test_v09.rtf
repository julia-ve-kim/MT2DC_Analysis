{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red196\green26\blue22;\red155\green35\blue147;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #!/usr/bin/env python3\cf4 \
\cf2 # -*- coding: utf-8 -*-\cf4 \
\cf5 """\cf4 \
\cf5 Created on Wed May 18 10:02:03 2022\cf4 \
\
\cf5 @author: juliakim\cf4 \
\cf5 """\cf4 \
\

\f1\b \cf6 import
\f0\b0 \cf4  ROOT\

\f1\b \cf6 import
\f0\b0 \cf4  math\

\f1\b \cf6 import
\f0\b0 \cf4  numpy 
\f1\b \cf6 as
\f0\b0 \cf4  np\

\f1\b \cf6 import
\f0\b0 \cf4  scipy.optimize 
\f1\b \cf6 as
\f0\b0 \cf4  so \
\
\cf2 # Define input file \cf4 \
f_inputRoot = ROOT.TFile.Open(\cf5 "/Users/juliakim/Documents/2022_03_March_07_skim_mg5_ttbar_jet_merged_001-716_ntuple_2l2b_v01.root"\cf4 , \cf5 "read"\cf4 )\
t = f_inputRoot.Get(\cf5 "variables"\cf4 )\
type(t)\
f_outputRoot = ROOT.TFile.Open(\cf5 "/Users/juliakim/Documents/2022_05_May_10_mt2dc_analysis_v01.root"\cf4 , \cf5 "recreate"\cf4 )\
\
\cf2 # Define constants \cf4 \
alphaList = [\cf7 1\cf4 ] \
notable_sol = [] \
\
\cf2 # Define functions\cf4 \

\f1\b \cf6 def
\f0\b0 \cf4  mass_scalarCalc(px, py, pz, E): \
    \cf5 """Calculate the mass of a particular, using scalar input variables.\cf4 \
\cf5     """\cf4 \
    m_squared = E**\cf7 2\cf4  - (px**\cf7 2\cf4  + py**\cf7 2\cf4  + pz**\cf7 2\cf4 )\
    \
    
\f1\b \cf6 if
\f0\b0 \cf4  m_squared > \cf7 0\cf4 :\
        
\f1\b \cf6 return
\f0\b0 \cf4  np.sqrt(m_squared)\
    
\f1\b \cf6 return
\f0\b0 \cf4  \cf7 0\cf4  \
\

\f1\b \cf6 def
\f0\b0 \cf4  ET_scalarCalc(m, pT):\
    \cf5 """Calculate the transverse energy of a particle, using scalar input variables.\cf4 \
\cf5     """\cf4 \
    ET = math.sqrt(max(\cf7 0\cf4 , m**\cf7 2\cf4 +pT**\cf7 2\cf4 )) \
    
\f1\b \cf6 return
\f0\b0 \cf4  ET\
\

\f1\b \cf6 def
\f0\b0 \cf4  mT_arrayCalc(p4_vis_array, p4_invis_array):\
    \cf5 """Calculate the transverse mass of a parent particle, using array input variables.\cf4 \
\cf5     Note: p4_(in)vis_array = [px, py, pz, E].\cf4 \
\cf5     """\cf4  \
    \cf2 # Extract mass information\cf4 \
    m_vis = max(\cf7 0\cf4 , mass_scalarCalc(p4_vis_array[\cf7 0\cf4 ], p4_vis_array[\cf7 1\cf4 ], p4_vis_array[\cf7 2\cf4 ], p4_vis_array[\cf7 3\cf4 ]))\
    m_invis = max(\cf7 0\cf4 , mass_scalarCalc(p4_invis_array[\cf7 0\cf4 ], p4_invis_array[\cf7 1\cf4 ], p4_invis_array[\cf7 2\cf4 ], p4_invis_array[\cf7 3\cf4 ]))\
    \
    \cf2 # Get transverse momentum vectors \cf4 \
    pT_vis_vec = np.array([p4_vis_array[\cf7 0\cf4 ], p4_vis_array[\cf7 1\cf4 ]])  \
    pT_invis_vec = np.array([p4_invis_array[\cf7 0\cf4 ], p4_invis_array[\cf7 1\cf4 ]])\
    \
    \cf2 # Extract energy information \cf4 \
    ET_vis = ET_scalarCalc(m_invis, np.linalg.norm(pT_vis_vec)) \
    ET_invis = ET_scalarCalc(m_invis, np.linalg.norm(pT_invis_vec)) \
   \
    mT = math.sqrt(max(\cf7 0\cf4 , m_vis**\cf7 2\cf4  + m_invis**\cf7 2\cf4  + \cf7 2\cf4 *(ET_vis*ET_invis - np.dot(pT_vis_vec, pT_invis_vec))))\
    
\f1\b \cf6 return
\f0\b0 \cf4  mT \
\
\cf2 # Define TLorentzVector module functions \cf4 \

\f1\b \cf6 def
\f0\b0 \cf4  extract_Px(pT, eta, phi, mass): \
    \cf5 """Extract Px, from scalar input variables. \cf4 \
\cf5     """\cf4 \
    Px = pT*np.cos(phi) \
    
\f1\b \cf6 return
\f0\b0 \cf4  Px \
\

\f1\b \cf6 def
\f0\b0 \cf4  extract_Py(pT, eta, phi, mass):\
    \cf5 """Extract Py, from scalar input variables.\cf4 \
\cf5     """\cf4 \
    Py = pT*np.sin(phi) \
    
\f1\b \cf6 return
\f0\b0 \cf4  Py \
    \

\f1\b \cf6 def
\f0\b0 \cf4  extract_Pz(pT, eta, phi, mass):\
    \cf5 """Extract Pz, from scalar input variables.\cf4 \
\cf5     """\cf4  \
    theta = \cf7 2\cf4 *np.arctan(np.exp(-eta)) \cf2 # polar angle \cf4 \
    Pz = pT/np.tan(theta)\
    
\f1\b \cf6 return
\f0\b0 \cf4  Pz \
    \

\f1\b \cf6 def
\f0\b0 \cf4  extract_E(pT, eta, phi, mass):\
    \cf5 """Extract E, from scalar input variables.\cf4 \
\cf5     """\cf4 \
    Pz = extract_Pz(pT, eta, phi, mass)\
    E = math.sqrt(mass**\cf7 2\cf4  + (pT**\cf7 2\cf4  + Pz**\cf7 2\cf4 ))\
    
\f1\b \cf6 return
\f0\b0 \cf4  E \
    \
\cf2 # Create TH1 histogram \cf4 \
\cf2 # mT2dc(alpha = 1) - mT2(W)   \cf4 \
h_alpha_1 = ROOT.TH1F(\cf5 "h_alpha_1"\cf4 , \cf5 "mT2dc(alpha = 1) - mt2dc; Difference [GeV]; Number of entries / 1 GeV"\cf4 , \cf7 100\cf4 , \cf7 -100\cf4 , \cf7 100\cf4 )\
h_mt2dc_sol = ROOT.TH1F(\cf5 "h_m2tdc_sol"\cf4 , \cf5 "mT2dc(alpha = 1); mT2dc [GeV]; Number of entries / 1 GeV"\cf4 , \cf7 100\cf4 , \cf7 0\cf4 , \cf7 100\cf4 )\
\cf2 #notable_sol = [] \cf4 \
\
\cf2 # Get the number entries in the tree \cf4 \
nentries = t.GetEntries() \cf2 # 60599  \cf4 \
\

\f1\b \cf6 for
\f0\b0 \cf4  i 
\f1\b \cf6 in
\f0\b0 \cf4  range(\cf7 1000\cf4 ):\
    
\f1\b \cf6 if
\f0\b0 \cf4  (i%\cf7 1000\cf4 ==\cf7 0\cf4 ): \
       print(\cf5 ":: Processing entry "\cf4 , i, \cf5 " = "\cf4 , i*\cf7 1.0\cf4 /nentries*\cf7 100.0\cf4 , \cf5 "%."\cf4 )    \
    
\f1\b \cf6 if
\f0\b0 \cf4  t.LoadTree(i) < \cf7 0\cf4 :\
       print(\cf5 "**could not load tree for entry #%s"\cf4 ) % i\
       
\f1\b \cf6 break
\f0\b0 \cf4 \
    nb = t.GetEntry(i) \
    
\f1\b \cf6 if
\f0\b0 \cf4  nb <= \cf7 0\cf4 :\
       
\f1\b \cf6 continue
\f0\b0 \cf4 \
    \
    \cf2 # retrive information from tree \cf4 \
    \cf2 # get the mt2_W information from every event \cf4 \
    mt2_W = t.mt2_W_ell1ell2 \
    \
    \cf2 # get sideA bjet information \cf4 \
    bjet1_sideA_Px = extract_Px(t.bjet1_PT, t.bjet1_Eta, t.bjet1_Phi, t.bjet1_Mass) \
    bjet1_sideA_Py = extract_Py(t.bjet1_PT, t.bjet1_Eta, t.bjet1_Phi, t.bjet1_Mass)\
    bjet1_sideA_Pz = extract_Pz(t.bjet1_PT, t.bjet1_Eta, t.bjet1_Phi, t.bjet1_Mass)\
    bjet1_sideA_E = extract_E(t.bjet1_PT, t.bjet1_Eta, t.bjet1_Phi, t.bjet1_Mass) \
    bjet1_sideA_array = np.array([bjet1_sideA_Px, bjet1_sideA_Py, bjet1_sideA_Pz, bjet1_sideA_E]) \
    \
    \cf2 # get sideA lepton information \cf4 \
    ell1_sideA_Px = extract_Px(t.ell1_PT, t.ell1_Eta, t.ell1_Phi, \cf7 0\cf4 ) \
    ell1_sideA_Py = extract_Py(t.ell1_PT, t.ell1_Eta, t.ell1_Phi, \cf7 0\cf4 )\
    ell1_sideA_Pz = extract_Pz(t.ell1_PT, t.ell1_Eta, t.ell1_Phi, \cf7 0\cf4 )\
    ell1_sideA_E = extract_E(t.ell1_PT, t.ell1_Eta, t.ell1_Phi, \cf7 0\cf4 ) \
    ell1_sideA_array = np.array([ell1_sideA_Px, ell1_sideA_Py, ell1_sideA_Pz, ell1_sideA_E]) \
    \
    vis_sideA_array = np.array([bjet1_sideA_array, ell1_sideA_array]) \
    \
    \cf2 # get sideB bjet information\cf4 \
    bjet2_sideB_Px = extract_Px(t.bjet2_PT, t.bjet2_Eta, t.bjet2_Phi, t.bjet2_Mass) \
    bjet2_sideB_Py = extract_Py(t.bjet2_PT, t.bjet2_Eta, t.bjet2_Phi, t.bjet2_Mass)\
    bjet2_sideB_Pz = extract_Pz(t.bjet2_PT, t.bjet2_Eta, t.bjet2_Phi, t.bjet2_Mass)\
    bjet2_sideB_E = extract_E(t.bjet2_PT, t.bjet2_Eta, t.bjet2_Phi, t.bjet2_Mass) \
    bjet2_sideB_array = np.array([bjet2_sideB_Px, bjet2_sideB_Py, bjet2_sideB_Pz, bjet2_sideB_E]) \
    \
    \cf2 # get sideB lepton information \cf4 \
    ell2_sideB_Px = extract_Px(t.ell2_PT, t.ell2_Eta, t.ell2_Phi, \cf7 0\cf4 ) \
    ell2_sideB_Py = extract_Py(t.ell2_PT, t.ell2_Eta, t.ell2_Phi, \cf7 0\cf4 )\
    ell2_sideB_Pz = extract_Pz(t.ell2_PT, t.ell2_Eta, t.ell2_Phi, \cf7 0\cf4 )\
    ell2_sideB_E = extract_E(t.ell2_PT, t.ell2_Eta, t.ell2_Phi, \cf7 0\cf4 ) \
    ell2_sideB_array = np.array([ell2_sideB_Px, ell2_sideB_Py, ell2_sideB_Pz, ell2_sideB_E])  \
   \
    vis_sideB_array = np.array([bjet2_sideB_array, ell2_sideB_array]) \
\
    \cf2 # get met information \cf4 \
    met_Px = extract_Px(t.EtMiss, \cf7 0\cf4 , t.EtMiss_phi, \cf7 0\cf4 ) \
    met_Py = extract_Py(t.EtMiss, \cf7 0\cf4 , t.EtMiss_phi, \cf7 0\cf4 ) \
    met_E = extract_E(t.EtMiss, \cf7 0\cf4 , t.EtMiss_phi, \cf7 0\cf4 ) \
    met = np.array([met_Px, met_Py, \cf7 0\cf4 , met_E])\
   \
    \cf2 # define initial solution vector \cf4 \
    invis_sideA_array_guess = met/\cf7 2\cf4  \
    \
    \cf2 # define the function to minimise\cf4 \
    
\f1\b \cf6 def
\f0\b0 \cf4  objective(invis_sideA_array):\
        alpha_term_1 = mT_arrayCalc(vis_sideA_array[\cf7 -1\cf4 ], invis_sideA_array) \cf2 # mT(lA, pT_A)\cf4 \
        alpha_term_2 = mT_arrayCalc(vis_sideB_array[\cf7 -1\cf4 ], met-invis_sideA_array) \cf2 # mT(TB, pT_B) \cf4 \
        alpha_term = max(alpha_term_1, alpha_term_2) \
        \
        beta_term_1 = mT_arrayCalc(vis_sideA_array[\cf7 0\cf4 ] + vis_sideA_array[\cf7 -1\cf4 ], invis_sideA_array) \cf2 # mT(lATA, pT_A)\cf4 \
        beta_term_2 = mT_arrayCalc(vis_sideB_array[\cf7 0\cf4 ] + vis_sideB_array[\cf7 -1\cf4 ], met-invis_sideA_array) \cf2 # mT(TBbB, pt_B)\cf4 \
        beta_term = max(beta_term_1, beta_term_2) \
    \
        
\f1\b \cf6 return
\f0\b0 \cf4  alphaList[\cf7 0\cf4 ]*alpha_term + (\cf7 1\cf4 -alphaList[\cf7 0\cf4 ])*beta_term \
\
    sol = so.minimize(objective, x0 = invis_sideA_array_guess, method=\cf7 'Nelder-Mead'\cf4 , options=\{\cf7 'maxiter'\cf4 : \cf7 2000\cf4 , \cf7 'xatol'\cf4 : \cf7 1e-5\cf4 , \cf7 'fatol'\cf4 :\cf7 1e-5\cf4 , \cf7 'disp'\cf4 : 
\f1\b \cf6 True
\f0\b0 \cf4 \})\
    print(\cf7 'event'\cf4 , i, sol.fun - mt2_W) \
    \
    h_alpha_1.Fill(sol.fun - mt2_W) \
    h_mt2dc_sol.Fill(sol.fun)\
    \
    
\f1\b \cf6 if
\f0\b0 \cf4  sol.fun - mt2_W > \cf7 1\cf4 :\
        notable_sol.append([i, sol.fun - mt2_W])\
                         \
print(notable_sol) \
\
\cf2 # Draw the histograms and save them.\cf4 \
c = ROOT.TCanvas()\
                         \
h_alpha_1.Draw(\cf5 "E"\cf4 ) \cf2 # put error bars \cf4 \
c.SaveAs(\cf5 "h_alpha_1_met_v01.pdf"\cf4 )\
\
h_mt2dc_sol.Draw(\cf5 "E"\cf4 ) \cf2 # put error bars \cf4 \
c.SaveAs(\cf5 "h_mt2dc_sol_met_v01.pdf"\cf4 )\
\
h_alpha_1.Write() \
h_mt2dc_sol.Write() \
\
f_outputRoot.Close()\
}